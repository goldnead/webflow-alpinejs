{
  "version": 3,
  "sources": ["../../../lib/cookies.js", "../../../components/CookieConsent/CookieConsent.js"],
  "sourcesContent": ["\"use strict\";\n\nconst SECONDS_IN_A_YEAR = 864e5;\n\n/**\n * Cookies class to handle all of them cookie interactions.\n */\nexport class Cookies {\n  /**\n   * Get a Cookie by it's key\n   * @param  {[type]} key           [description]\n   * @param  {String} [fallback=''] [description]\n   * @return {[type]}               [description]\n   */\n  static get(key, fallback = \"\") {\n    return (\n      document.cookie.match(\"(^|;)\\\\s*\" + key + \"\\\\s*=\\\\s*([^;]+)\")?.pop() ||\n      fallback\n    );\n  }\n\n  /**\n   * Set a cookie.\n   * @param {[type]} key           [description]\n   * @param {[type]} value         [description]\n   * @param {Number} [expires=365] [description]\n   * @param {String} [path='/']    [description]\n   */\n  static set(key, value, expires = 365, path = \"/\") {\n    let expirationDate = new Date(new Date() * 1 + expires * SECONDS_IN_A_YEAR);\n\n    key = encodeURIComponent(String(key))\n      .replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)\n      .replace(/[()]/g, escape);\n\n    value = encodeURIComponent(String(value)).replace(\n      /%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,\n      decodeURIComponent\n    );\n\n    return (document.cookie =\n      key +\n      \"=\" +\n      value +\n      \"; expires=\" +\n      expirationDate.toUTCString() +\n      \"; path=/\");\n  }\n}\n", "import { Cookies } from \"../../lib/cookies\";\n\ndocument.addEventListener(\"alpine:init\", () => {\n  Alpine.data(\"cookieconsent\", () => ({\n    // object storing all them script tags by type name\n    scriptTags: {},\n    // prefix for stoeing the cookies in\n    get prefix() {\n      return (this.$root.dataset.site || \"cookies\") + \"-\";\n    },\n    // is Cookie open\n    isOpen: true,\n    // all the cookie types. So far only two of them\n    types: {},\n\n    tooltip: null,\n\n    lockedType: \"basic\",\n\n    hasConsent: false,\n\n    init(types = null) {\n      if (!types || types.length === 0) return;\n\n      this.types = types;\n      // register all the script tags that would be loaded after consenting\n      this.registerTemplates();\n      // if the user has already consented just run the appropriate scripts\n      if (this.hasAlreadyConsented()) {\n        // Update the internal model so the user sees the correct consents in the modal.\n        this.updateModel();\n        // load all script tags the user consented to\n        this.loadTags();\n        // then close modal\n        this.isOpen = false;\n      }\n    },\n\n    getCookieTypes() {\n      console.log(this.$el);\n    },\n\n    // close modal\n    close() {\n      if (this.hasAlreadyConsented()) {\n        this.isOpen = false;\n      }\n    },\n\n    open() {\n      this.isOpen = true;\n    },\n\n    highlight($event) {\n      this.open();\n      this.tooltip = $event.detail.type;\n      if (this.$refs[$event.detail.type]) {\n        this.$refs[$event.detail.type].classList.add(\"cc__checkbox--highlight\");\n      }\n    },\n\n    removeHighlights() {\n      this.tooltip = null;\n      Object.keys(this.types).forEach((type) => {\n        this.$refs[type].classList.remove(\"cc__checkbox--highlight\");\n      });\n    },\n\n    clearAll() {\n      this.clear();\n    },\n\n    toggle() {\n      if (this.isOpen) {\n        this.close();\n      } else {\n        this.open();\n      }\n    },\n\n    updateModel() {\n      Object.keys(this.types).forEach((type) => {\n        if (this.consentExistsFor(type)) {\n          this.types[type] = true;\n        } else {\n          this.types[type] = false;\n        }\n      });\n    },\n\n    /**\n     * Determines if user already consented to our cookie policy.\n     *\n     * @return {Boolean} [description]\n     */\n    hasAlreadyConsented() {\n      let consented = [];\n      Object.keys(this.types).forEach((type) => {\n        consented.push(this.consentExistsFor(type));\n        if (this.consentExistsFor(type)) {\n          this.$dispatch(\"consent\", { type: type });\n        }\n      });\n      this.hasConsent = consented.includes(true);\n      return consented.includes(true);\n    },\n\n    /**\n     * Does a Cookie already exist for a given consent type?\n     *\n     * @param  {[type]} consentType [description]\n     * @return {[type]}             [description]\n     */\n    consentExistsFor(consentType) {\n      return Cookies.get(this.prefix + consentType) === \"true\";\n    },\n\n    /**\n     * Selects all the script tags and stores them in the scriptTags-object.\n     *\n     * @return void\n     */\n    registerTemplates() {\n      const tags = document.querySelectorAll('template[data-type=\"consent\"]');\n\n      if (tags.length === 0) return;\n\n      tags.forEach((item, i) => {\n        this.scriptTags[item.dataset.consentType] = item;\n      });\n    },\n\n    /**\n     * Is the given node a script-tag?\n     *\n     * @param  {[type]}  node [description]\n     * @return {Boolean}      [description]\n     */\n    isScript(node) {\n      return node.nodeName === \"SCRIPT\";\n    },\n\n    /**\n     * Is the given node a pixel element?\n     *\n     * @param  {[type]}  node [description]\n     * @return {Boolean}      [description]\n     */\n    isPixel(node) {\n      return node.classList.contains(\"pixel\");\n    },\n\n    /**\n     * Load & initialize the script tags that the user consented to.\n     */\n    loadTags() {\n      // iterate through all available templates\n      Object.keys(this.scriptTags).forEach((type, index) => {\n        const template = this.scriptTags[type];\n        // get all nodes inside the template that are script tags or\n        // elements with class .pixel\n        const nodes = template.content\n          .cloneNode(true)\n          .querySelectorAll(\"script, .pixel\");\n        // if a consent already exists for this type of cookies...\n        if (this.consentExistsFor(type)) {\n          // ...go through all ndoes and scripts and activate them\n          Object.keys(nodes).forEach((i) => {\n            const node = nodes[i];\n            this.loadScriptOrPixel(node);\n          });\n        }\n      });\n    },\n\n    /**\n     * Loads the corresponding tags by script or pixel\n     * @param  {[type]} node [description]\n     * @return {[type]}      [description]\n     */\n    loadScriptOrPixel(node) {\n      if (this.isScript(node)) {\n        this.loadScriptTag(node);\n      } else if (this.isPixel(node)) {\n        this.loadPixel(node);\n      }\n    },\n\n    /**\n     * Returns true if a type is currently selected.\n     *\n     * @param  {[type]}  type [description]\n     * @return {Boolean}      [description]\n     */\n    isSelected(type) {\n      return this.types[type] === true;\n    },\n\n    /**\n     * Approve to a specific consent type.\n     *\n     * @param  {[type]} consentType [description]\n     * @return {[type]}             [description]\n     */\n    consent(consentType) {\n      Cookies.set(this.prefix + consentType, true);\n      this.$dispatch(\"consent\", { type: consentType });\n    },\n\n    triggerConsent(e) {\n      const consentType = e.detail.type;\n\n      if (!consentType) return;\n\n      this.consent(consentType);\n      this.updateModel();\n    },\n\n    optout(consentType) {\n      if (consentType === this.lockedType) return;\n      this.types[consentType] = false;\n      Cookies.set(this.prefix + consentType, false);\n      this.$dispatch(\"unconsent\", { type: consentType });\n    },\n\n    /**\n     * Loads a given script tag and calls it's content in a callback.\n     *\n     * @param  {[type]} node [description]\n     * @return {[type]}      [description]\n     */\n    loadScriptTag(node) {\n      if (node.attributes.length > 0) {\n        let prom = new Promise((resolve, reject) => {\n          var s;\n          s = document.createElement(\"script\");\n          s.src = node.src;\n\n          s.onload = resolve;\n          s.onerror = reject;\n          document.head.appendChild(s);\n        });\n      } else if (node) {\n        const callback = Function(node.text);\n        callback();\n      }\n    },\n\n    /**\n     * Loads a non-script tag, like an ifram or a image into a container\n     * element in the DOM.\n     *\n     * @param  {[type]} pixel [description]\n     * @return {[type]}       [description]\n     */\n    loadPixel(pixel) {\n      if (pixel) {\n        const container = document.getElementById(\"pixel-container\");\n        container.appendChild(pixel);\n      }\n    },\n\n    /**\n     * Consents to all types that are currently selected.\n     *\n     * @return {[type]} [description]\n     */\n    consentToSelectedTypes() {\n      Object.keys(this.types).forEach((type, index) => {\n        if (this.isSelected(type)) {\n          this.consent(type);\n        } else {\n          this.optout(type);\n        }\n      });\n      this.loadTags();\n    },\n\n    clear() {\n      Object.keys(this.types).forEach((type, index) => {\n        this.optout(type);\n      });\n      this.submit();\n    },\n\n    /**\n     * Submits the users consent choice and consents accordingly.\n     *\n     * @return {[type]} [description]\n     */\n    submit() {\n      this.removeHighlights();\n      setTimeout(() => {\n        this.consentToSelectedTypes();\n        this.$dispatch(\"notice:info\", {\n          message: \"Vielen Dank, deine Einstellungen wurden gespeichert.\",\n        });\n        this.close();\n      }, 500);\n    },\n\n    /**\n     * Select & consent to all cookies.\n     * @return {[type]} [description]\n     */\n    selectAll() {\n      Object.keys(this.types).forEach((index) => {\n        this.types[index] = true;\n      });\n      this.submit();\n    },\n  }));\n});\n"],
  "mappings": "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",
  "names": ["Cookies", "key", "fallback", "value", "expires", "path", "expirationDate", "types", "$event", "type", "consented", "consentType", "Cookies", "tags", "item", "i", "node", "index", "nodes", "e", "prom", "resolve", "reject", "s", "pixel"]
}
